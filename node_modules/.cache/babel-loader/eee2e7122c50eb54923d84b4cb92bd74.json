{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tsion\\\\OneDrive\\\\Desktop\\\\programming\\\\EVANGADI\\\\phase3\\\\ReactAPIandRouting\\\\react-components\\\\src\\\\Components\\\\Main\\\\Rating\\\\Rating.js\";\nimport React, { Component } from \"react\";\n\nclass Rating extends Component {\n  constructor() {\n    super();\n\n    this.increment = () => {\n      // This works, but it is prone to error\n      // During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \n      // this.setState({\n      //   value: this.state.value + 1\n      // });\n      // To check that this one fails, lets write something that should be dependent on the updated value \n      // this.setState({\n      //   value: this.state.value + 1\n      // });\n      // this.setState({\n      //   value: this.state.value - 1\n      // });\n      // If we use an updater function to pass the current state instead, it will work\n      // this.setState((prevState) => {\n      //   return {\n      //     value: prevState.value + 1,\n      //   };\n      // });\n      // this.setState((state) => {\n      //   return {\n      //     value: state.value - 2,\n      //   };\n      // });\n      // For the purpose of our example, lets just make the increment function arr the rating by one \n      this.setState(state => {\n        return {\n          value: state.value + 1\n        };\n      });\n    };\n\n    this.decrement = () => {\n      // The same thing for our decrement function \n      // Lets make it so that it decreases the rating by 1 \n      this.setState(state => {\n        return {\n          value: state.value - 1\n        };\n      });\n    };\n\n    this.state = {\n      value: 5\n    };\n  } // Not that we are using an arrow function in here\n  // If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \n\n\n  render() {\n    // Conditional rendering in React \n    let initialText = \"Average rating:\";\n    let changedText = \"You rated this product:\";\n    let displayText = \"\";\n    let counter = 1;\n\n    if (this.state.value != 5) {\n      counter = counter + 1;\n    }\n\n    if (counter >= 2) {\n      displayText = changedText;\n    } else {\n      displayText = initialText;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rating-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Please rate this mac out of 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"postive\",\n          onClick: this.increment,\n          children: \" Rate up \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"negative\",\n          onClick: this.decrement,\n          children: \" Rate down \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rating-result\",\n          children: [\" \", displayText, \" \", this.state.value]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Rating;","map":{"version":3,"sources":["C:/Users/tsion/OneDrive/Desktop/programming/EVANGADI/phase3/ReactAPIandRouting/react-components/src/Components/Main/Rating/Rating.js"],"names":["React","Component","Rating","constructor","increment","setState","state","value","decrement","render","initialText","changedText","displayText","counter"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,MAAN,SAAqBD,SAArB,CAA+B;AAE7BE,EAAAA,WAAW,GAAE;AACX;;AADW,SAUbC,SAVa,GAUD,MAAM;AAChB;AACA;AAEE;AACA;AACA;AAGF;AAEE;AACA;AACA;AAEA;AACA;AACA;AAEF;AAEE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEF;AACE,WAAKC,QAAL,CAAeC,KAAD,IAAW;AACvB,eAAO;AACLC,UAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AADhB,SAAP;AAGD,OAJD;AAKH,KAjDY;;AAAA,SAkDbC,SAlDa,GAkDD,MAAM;AAEhB;AACA;AACA,WAAKH,QAAL,CAAeC,KAAD,IAAW;AACrB,eAAO;AACLC,UAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AADhB,SAAP;AAGD,OAJH;AAKC,KA3DU;;AAEV,SAAKD,KAAL,GAAa;AACZC,MAAAA,KAAK,EAAE;AADK,KAAb;AAGF,GAP4B,CAS7B;AACA;;;AAqDAE,EAAAA,MAAM,GAAG;AACP;AACA,QAAIC,WAAW,GAAG,iBAAlB;AACA,QAAIC,WAAW,GAAG,yBAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;AAEA,QAAIC,OAAO,GAAG,CAAd;;AAEA,QAAG,KAAKP,KAAL,CAAWC,KAAX,IAAoB,CAAvB,EAAyB;AACvBM,MAAAA,OAAO,GAAGA,OAAO,GAAG,CAApB;AACD;;AAED,QAAGA,OAAO,IAAI,CAAd,EAAgB;AACdD,MAAAA,WAAW,GAAGD,WAAd;AACD,KAFD,MAEK;AACHC,MAAAA,WAAW,GAAGF,WAAd;AACD;;AACD,wBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AAAQ,UAAA,SAAS,EAAC,SAAlB;AAA4B,UAAA,OAAO,EAAE,KAAKN,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,SAAS,EAAC,UAAlB;AAA6B,UAAA,OAAO,EAAE,KAAKI,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,0BAAiCI,WAAjC,OAA+C,KAAKN,KAAL,CAAWC,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AA1F4B;;AA6F/B,eAAeL,MAAf","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Rating extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n     this.state = {\r\n      value: 5,\r\n    };   \r\n  }\r\n\r\n  // Not that we are using an arrow function in here\r\n  // If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \r\n\r\n  increment = () => {\r\n    // This works, but it is prone to error\r\n    // During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \r\n    \r\n      // this.setState({\r\n      //   value: this.state.value + 1\r\n      // });\r\n\r\n\r\n    // To check that this one fails, lets write something that should be dependent on the updated value \r\n\r\n      // this.setState({\r\n      //   value: this.state.value + 1\r\n      // });\r\n\r\n      // this.setState({\r\n      //   value: this.state.value - 1\r\n      // });\r\n\r\n    // If we use an updater function to pass the current state instead, it will work\r\n\r\n      // this.setState((prevState) => {\r\n      //   return {\r\n      //     value: prevState.value + 1,\r\n      //   };\r\n      // });\r\n\r\n      // this.setState((state) => {\r\n      //   return {\r\n      //     value: state.value - 2,\r\n      //   };\r\n      // });\r\n\r\n    // For the purpose of our example, lets just make the increment function arr the rating by one \r\n      this.setState((state) => {\r\n        return {\r\n          value: state.value + 1,\r\n        };\r\n      });\r\n  };\r\n  decrement = () => {\r\n\r\n    // The same thing for our decrement function \r\n    // Lets make it so that it decreases the rating by 1 \r\n    this.setState((state) => {\r\n        return {\r\n          value: state.value - 1,\r\n        };\r\n      });\r\n    };\r\n\r\n  render() {\r\n    // Conditional rendering in React \r\n    let initialText = \"Average rating:\";\r\n    let changedText = \"You rated this product:\"\r\n    let displayText = \"\"; \r\n\r\n    let counter = 1; \r\n\r\n    if(this.state.value != 5){\r\n      counter = counter + 1; \r\n    }\r\n\r\n    if(counter >= 2){\r\n      displayText = changedText;\r\n    }else{\r\n      displayText = initialText; \r\n    }\r\n    return (\r\n      <div className=\"rating-wrapper\">\r\n        <h3>Please rate this mac out of 10</h3> \r\n        <div>\r\n          <button className=\"postive\" onClick={this.increment}> Rate up </button>\r\n          <button className=\"negative\" onClick={this.decrement}> Rate down </button>\r\n          <div className=\"rating-result\"> {displayText} {this.state.value}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Rating;"]},"metadata":{},"sourceType":"module"}